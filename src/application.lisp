(in-package :dexter)

;; dexter:application
(defclass application (responder)
  ((display :accessor display
            :initarg :display
            :documentation "The X display.")
   (last-timestamp :accessor last-timestamp
                   :initform 0
                   :documentation "The last usable timestamp received by the application.")))

(defmethod run (application)
  (unwind-protect
    (xlib:event-case ((display application) :discard-p t :force-output-p t)
      (key-press (code sequence time root window child root-x root-y x y state same-screen-p)
        (key-press application (make-event code sequence time root window child root-x root-y x y state same-screen-p)))
      (key-release (code sequence time root window child root-x root-y x y state same-screen-p)
        (key-release application (make-event code sequence time root window child root-x root-y x y state same-screen-p)))
      (button-press (event-key code sequence time root window child root-x root-y x y state same-screen-p)
        (button-press application (make-event event-key code sequence time root window child root-x root-y x y state same-screen-p)))
      (button-release (code sequence time root window child root-x root-y x y state same-screen-p)
        (button-release application (make-event code sequence time root window child root-x root-y x y state same-screen-p)))
      (motion-notify (hint-p sequence time root window child root-x root-y x y state same-screen-p)
        (motion-notify application (make-event hint-p sequence time root window child root-x root-y x y state same-screen-p)))
      (exposure (sequence window x y width height count)
        (exposure application (make-event sequence window x y width height count)))
      (graphics-exposure (sequence drawable x y width height minor count major)
        (graphics-exposure application (make-event sequence drawable x y width height minor count major)))
      (no-exposure (sequence drawable minor major)
        (no-exposure application (make-event sequence drawable minor major)))
      ;; The remaining events are handled by the window or the application.
      (enter-notify (kind sequence time root window child root-x root-y x y state mode focus-p same-screen-p)
        (enter-notify application (make-event kind sequence time root window child root-x root-y x y state mode focus-p same-screen-p)))
      (leave-notify (kind sequence time root window child root-x root-y x y state mode focus-p same-screen-p)
        (leave-notify application (make-event kind sequence time root window child root-x root-y x y state mode focus-p same-screen-p)))
      (focus-in (kind sequence window mode)
        (focus-in application (make-event kind sequence window mode)))
      (focus-out (kind sequence window mode)
        (focus-out application (make-event kind sequence window mode)))
      (keymap-notify (keymap)
        (keymap-notify application (make-event keymap)))
      (visibility-notify (sequence window state)
        (visibility-notify application (make-event sequence window state)))
      (create-notify (sequence parent window x y width height border-width override-redirect-p)
        (create-notify application (make-event sequence parent window x y width height border-width override-redirect-p)))
      (destroy-notify (sequence window)
        (destroy-notify application (make-event sequence window)))
      (unmap-notify (sequence window configure-p)
        (unmap-notify application (make-event sequence window configure-p)))
      (map-notify (sequence window override-redirect-p)
        (map-notify application (make-event sequence window override-redirect-p)))
      (map-request (sequence parent window)
        (map-request application (make-event sequence parent window)))
      (reparent-notify (sequence window parent x y override-redirect-p)
        (reparent-notify application (make-event sequence window parent x y override-redirect-p)))
      (configure-notify (sequence window above-sibling x y width height border-width override-redirect-p)
        (configure-notify application (make-event sequence window above-sibling x y width height border-width override-redirect-p)))
      (configure-request (stack-mode sequence parent window above-sibling x y width height border-width value-mask)
        (configure-request application (make-event stack-mode sequence parent window above-sibling x y width height border-width value-mask)))
      ;(gravity-notify (sequence window x y))
      ;(resize-request (sequence window width height))
      ;(circulate-notify (sequence window parent place))
      ;(circulate-request (sequence window parent place))
      (property-notify (sequence window event-window atom time state)
        (property-notify application (make-event sequence window event-window atom time state)))
      (selection-clear (sequence time window selection)
        (selection-clear application (make-event sequence time window selection)))
      (selection-request (sequence time window requestor selection target property)
        (selection-request application (make-event sequence time window requestor selection target property)))
      (selection-notify (sequence time window selection target property)
        (selection-notify application (make-event sequence time window selection target property)))
      (colormap-notify (sequence window colormap new-p installed-p)
        (colormap-notify application (make-event sequence window colormap new-p installed-p)))
      (client-message (format sequence window type data)
        (client-message application (make-event format sequence window type data)))
      (mapping-notify (sequence request start count)
        (mapping-notify application (make-event sequence request start count)))
      (otherwise (event-key window)
        (format t "A window! ~S   An event! ~S~%" window event-key) nil))
    (xlib:close-display (display application))))