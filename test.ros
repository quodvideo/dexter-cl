#!/bin/sh
#|
exec ros -Q -- $0 "$@"
|#
(ql:quickload 'clx :silent t)
(defpackage :dexter
  (:use :cl)
  (:nicknames :dx))
(in-package :dexter)

;; Rather than having an initialize function that applications call, loading dexter does its initialization.
(defvar *display* (xlib:open-default-display))
(defvar *screen* (xlib:display-default-screen *display*))
(defvar *root* (xlib:screen-root *screen*))
(defvar *dispatch-alist* nil)

;;; Some simple structures to keep geometry tidy
(defstruct rect
  "A rectangle into which something will be drawn."
  (x 0)
  (y 0)
  (width 1)
  (height 1))

(defstruct requisition
  "Width and height requested by something."
  (width 1)
  (height 1))

(defclass responder ()
  ((id :accessor id
       :initarg :id
       :initform ""
       :type string
       :documentation "A string ID for the responder.")))

(defgeneric focus (window token)
  (:documentation ""))

(defun make-default-window (parent &key (x -1) (y -1) (width 1) (height 1))
  "Creates a basic X window."
  (let ((xwin (xlib:create-window :parent parent
                                  :x x :y y :width width :height height
                                  :event-mask '(:exposure :button-press))))
    (xlib:set-wm-properties xwin :input :off :initial-state :normal)
    (xlib:change-property xwin
      :WM_PROTOCOLS (list (xlib:intern-atom (xlib:window-display xwin) :WM_DELETE_WINDOW)
                          (xlib:intern-atom (xlib:window-display xwin) :WM_TAKE_FOCUS))
      :ATOM 32)
    xwin))
      

(defclass window (responder)
  ((xwin :accessor xwin
         :initarg :xwin
         :initform (make-default-window *root*)
         :type xlib:window
         :documentation "The X window of the window.")
   (geometry :accessor geometry
             :initarg :geometry
             :initform (make-rect)
             :type rect)
   (title :accessor title
          :initarg :title
          :initform ""
          :type string
          :documentation "Main window title")
   (subtitle :accessor subtitle
             :initarg :subtitle
             :initform ""
             :type string
             :documentation "Window subtitle")
   (filename :accessor filename
             :initarg :filename
             :initform ""
             :type string
             :documentation "The filename represented by this window")
   (url :accessor url
        :initarg :url
        :initform ""
        :type string
        :documentation "The URL represented by this window")))

; (defmethod initialize-instance :after (window &key)
;  (when (xlib:window-p (xwin window))
;    (xlib:set-wm-properties (xwin window) :name (title window)))
;  (format t "here"))

(defmethod show (window)
  ;; this is hideous
  (setf (xlib:drawable-x (xwin window)) (rect-x (geometry window)))
  (setf (xlib:drawable-y (xwin window)) (rect-y (geometry window)))
  (setf (xlib:drawable-width (xwin window)) (rect-width (geometry window)))
  (setf (xlib:drawable-height (xwin window)) (rect-height (geometry window)))
  (xlib:set-wm-properties (xwin window) :name (title window))
  (xlib:map-window (xwin window)))

(defmethod focus (window token)
  (xlib:set-input-focus (xlib:window-display (xwin window)) (xwin window) :parent token))

;;; The rest is just doing stuff for testing.
(defun main (&rest argv)
  (declare (ignorable argv))
  (let* ((w1 (make-instance 'window :title "Bar" :geometry (make-rect :x 100 :y 10 :width 100 :height 100))))
    (show w1)
    (unwind-protect
      (xlib:event-case (*display* :discard-p t :force-output-p t)
        (client-message (format sequence window type data)
          (when (eq type :WM_PROTOCOLS)
            (cond ((eq (elt data 0) (xlib:intern-atom *display* :WM_DELETE_WINDOW)) (format t "DELETE!~%") t)
                  ((eq (elt data 0) (xlib:intern-atom *display* :WM_TAKE_FOCUS)) (format t "FOCUS!~%"))
                  (t (format t "A Client Message! ~S ~S ~S ~S ~S ~%" format sequence window type data)))))
        (otherwise (event-key window)
          (format t "A window! ~S   An event! ~S~%" window event-key) nil))
      (xlib:close-display *display*))))